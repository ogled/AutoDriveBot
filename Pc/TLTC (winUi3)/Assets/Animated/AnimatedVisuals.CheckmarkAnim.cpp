//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.1.240821.1+077322fa26
//       
//       Command:
//           LottieGen -Language Cppwinrt -WinUIVersion 3.0 -InputFile checkmarkAnim.json
//       
//       Input file:
//           checkmarkAnim.json (9803 bytes created 9:54+09:00 May 1 2025)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   108 |
// |--------------------------+-------|
// | Expression animators     |     1 |
// | KeyFrame animators       |     8 |
// | Reference parameters     |     1 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     5 |
// | ShapeVisuals             |     4 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |    10 |
// |--------------------------+-------|
// | Brushes                  |     9 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     4 |
// ------------------------------------
#include "pch.h"
#include "AnimatedVisuals.CheckmarkAnim.h"
#if __has_include ("AnimatedVisuals.CheckmarkAnim.g.cpp")
#include "AnimatedVisuals.CheckmarkAnim.g.cpp"
#endif
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Microsoft.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#ifdef BUILD_WINDOWS
namespace ABI
{
#include <Windows.Graphics.Effects.Interop.h>
}
#else
#include <Windows.Graphics.Effects.Interop.h>
#endif
#include <winrt/Windows.Graphics.Effects.h>
#include <vector>

using namespace winrt::Microsoft::UI;
using namespace winrt::Microsoft::UI::Composition;
using namespace winrt::Microsoft::UI::Xaml::Controls;
using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using Color = winrt::Windows::UI::Color;
using CompositionPropertySet = winrt::Microsoft::UI::Composition::CompositionPropertySet;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::AnimatedVisuals::implementation
{
    class CanvasGeometry : public winrt::implements<CanvasGeometry,
        IGeometrySource2D,
        ::ABI::Windows::Graphics::IGeometrySource2DInterop>
    {
        winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

    public:
        CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
            : _geometry{ geometry }
        { }

        // IGeometrySource2D.
        winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) noexcept(true) override
        {
            _geometry.copy_to(value);
            return S_OK;
        }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) noexcept(true) override
        {
            return E_NOTIMPL;
        }
    };
    
    enum class CanvasComposite : int
    {
        SourceOver = 0,
        DestinationOver = 1,
        SourceIn = 2,
        DestinationIn = 3,
        SourceOut = 4,
        DestinationOut = 5,
        SourceAtop = 6,
        DestinationAtop = 7,
        Xor = 8,
        Add = 9,
        Copy = 10,
        BoundedCopy = 11,
        MaskInvert = 12,
    };

    // This class is a substitute for the Microsoft::Graphics::Canvas::Effects::CompositeEffect
    // class so that composite effects can be used with 
    // Windows::UI::Composition::CompositionEffectBrush without requiring Win2d.
    class CompositeEffect : public winrt::implements<CompositeEffect,
        winrt::Windows::Graphics::Effects::IGraphicsEffect,
        winrt::Windows::Graphics::Effects::IGraphicsEffectSource,
        ::ABI::Windows::Graphics::Effects::IGraphicsEffectD2D1Interop>
    {
        winrt::hstring m_name{};
        CanvasComposite m_mode{};
        std::vector<winrt::Windows::Graphics::Effects::IGraphicsEffectSource> m_sources{};

    public:
        void Mode(CanvasComposite mode) { m_mode = mode; }
        CanvasComposite Mode(){ return m_mode; }

        void AddSource(winrt::Windows::Graphics::Effects::IGraphicsEffectSource source)
        {
            m_sources.emplace_back(source);
        }

        // IGraphicsEffect.
        void Name(winrt::hstring name) { m_name = name; }
        winrt::hstring Name() { return m_name; }

        // IGraphicsEffectD2D1Interop.
        IFACEMETHODIMP GetEffectId(GUID* id) noexcept(true) override
        {
            if (id != nullptr)
            {
                // CLSID_D2D1Composite.
                *id = { 0x48fc9f51, 0xf6ac, 0x48f1, { 0x8b, 0x58, 0x3b, 0x28, 0xac, 0x46, 0xf7, 0x6d } };
            }

            return S_OK;
        }

        // IGraphicsEffectD2D1Interop.
        IFACEMETHODIMP GetSourceCount(UINT* count) noexcept(true) override
        {
            if (count != nullptr)
            {
                *count = static_cast<UINT>(m_sources.size());
            }

            return S_OK;
        }

        // IGraphicsEffectD2D1Interop.
        IFACEMETHODIMP GetSource(
            UINT index,
            ::ABI::Windows::Graphics::Effects::IGraphicsEffectSource** source) noexcept(true) override
        {
            if (index >= m_sources.size() ||
                source == nullptr)
            {
                return E_INVALIDARG;
            }

            m_sources.at(index).as<::ABI::Windows::Graphics::Effects::IGraphicsEffectSource>().copy_to(source);

            return S_OK;
        }

        // IGraphicsEffectD2D1Interop.
        IFACEMETHODIMP GetPropertyCount(UINT* count) noexcept(true) override { *count = 1; return S_OK; }

        // IGraphicsEffectD2D1Interop.
        IFACEMETHODIMP GetProperty(
            UINT index,
            ::ABI::Windows::Foundation::IPropertyValue** value) noexcept(true) override
        {
            switch (index)
            {
            case D2D1_COMPOSITE_PROP_MODE:
                winrt::Windows::Foundation::PropertyValue::CreateUInt32(
                    static_cast<uint32_t>(m_mode)).as<::ABI::Windows::Foundation::IPropertyValue>().copy_to(value);
                return S_OK;
            default:
                *value = nullptr;
                return E_INVALIDARG;
            }
        }

        // IGraphicsEffectD2D1Interop.
        IFACEMETHODIMP GetNamedPropertyMapping(
            LPCWSTR,
            UINT*,
            ::ABI::Windows::Graphics::Effects::GRAPHICS_EFFECT_PROPERTY_MAPPING*) override
        {
            return E_INVALIDARG;
        }
    };

    class CheckmarkAnim_AnimatedVisual : public winrt::implements<CheckmarkAnim_AnimatedVisual,
            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual2,
            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
            IClosable>
    {
        winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
        static constexpr int64_t c_durationTicks{ 11666666L };
        Compositor const _c{ nullptr };
        ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
        AnimationController _animationController_0{ nullptr };
        BooleanKeyFrameAnimation _isVisibleBooleanAnimation_0{ nullptr };
        BooleanKeyFrameAnimation _isVisibleBooleanAnimation_1{ nullptr };
        CompositionColorBrush _colorBrush_AlmostDarkCyan_FF00B569{ nullptr };
        CompositionColorBrush _colorBrush_AlmostMediumTurquoise_FF3DDAB4{ nullptr };
        CompositionColorBrush _colorBrush_Black{ nullptr };
        CompositionEffectFactory _effectFactory{ nullptr };
        CompositionPath _path_0{ nullptr };
        CompositionPath _path_1{ nullptr };
        CompositionPathGeometry _pathGeometry_0{ nullptr };
        CompositionPathGeometry _pathGeometry_1{ nullptr };
        CompositionPathGeometry _pathGeometry_2{ nullptr };
        CompositionPathGeometry _pathGeometry_3{ nullptr };
        CompositionPathGeometry _pathGeometry_4{ nullptr };
        CompositionPathGeometry _pathGeometry_5{ nullptr };
        CompositionPathGeometry _pathGeometry_6{ nullptr };
        ContainerVisual _root{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
        ShapeVisual _shapeVisual_0{ nullptr };
        ShapeVisual _shapeVisual_1{ nullptr };
        ShapeVisual _shapeVisual_2{ nullptr };
        ShapeVisual _shapeVisual_3{ nullptr };
        StepEasingFunction _holdThenStepEasingFunction{ nullptr };
        StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

        void BindProperty(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            winrt::hstring expression,
            winrt::hstring referenceParameterName,
            CompositionObject referencedObject)
        {
            _reusableExpressionAnimation.ClearAllParameters();
            _reusableExpressionAnimation.Expression(expression);
            _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
            target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
        }

        BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
        {
            const auto result = _c.CreateBooleanKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue);
            return result;
        }

        ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateScalarKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix, CompositionBrush fillBrush)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            result.FillBrush(fillBrush);
            return result;
        }

        AnimationController AnimationController_0()
        {
            if (_animationController_0 != nullptr) { return _animationController_0; }
            const auto result = _animationController_0 = _c.CreateAnimationController();
            result.Pause();
            BindProperty(_animationController_0, L"Progress", L"_.Progress", L"_", _root);
            return result;
        }

        BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
        {
            // Frame 0.
            if (_isVisibleBooleanAnimation_0 != nullptr) { return _isVisibleBooleanAnimation_0; }
            const auto result = _isVisibleBooleanAnimation_0 = CreateBooleanKeyFrameAnimation(0.0F, true);
            // Frame 14.
            result.InsertKeyFrame(0.5F, false);
            return result;
        }

        BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
        {
            // Frame 0.
            if (_isVisibleBooleanAnimation_1 != nullptr) { return _isVisibleBooleanAnimation_1; }
            const auto result = _isVisibleBooleanAnimation_1 = CreateBooleanKeyFrameAnimation(0.0F, false);
            // Frame 14.
            result.InsertKeyFrame(0.5F, true);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_0()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -15.3190002F, 11.573F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 10.9989996F, -15.7370005F });
            sink->AddLine({ 15.3190002F, -11.573F });
            sink->AddLine({ -10.9989996F, 15.7370005F });
            sink->AddLine({ -15.3190002F, 11.573F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_1()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ -8.5369997F, -4.03299999F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -4.3829999F, -8.36299992F });
            sink->AddLine({ 8.5369997F, 4.03299999F });
            sink->AddLine({ 4.3829999F, 8.36299992F });
            sink->AddLine({ -8.5369997F, -4.03299999F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_2()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->SetFillMode(D2D1_FILL_MODE_WINDING);
            sink->BeginFigure({ 4.23799992F, -0.0839999989F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -0.0879999995F, -4.23500013F });
            sink->AddLine({ -4.23799992F, 0.0710000023F });
            sink->AddLine({ 0.0829999968F, 4.23500013F });
            sink->AddLine({ 2.82299995F, 1.38999999F });
            sink->AddLine({ 4.23799992F, -0.0839999989F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_3()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -13.2299995F, 13.7290001F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 13.2299995F, -13.7290001F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_4()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -6.51100016F, -6.24599981F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 6.51100016F, 6.24599981F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        CompositionColorBrush ColorBrush_AlmostDarkCyan_FF00B569()
        {
            return (_colorBrush_AlmostDarkCyan_FF00B569 == nullptr)
                ? _colorBrush_AlmostDarkCyan_FF00B569 = _c.CreateColorBrush({ 0xFF, 0x00, 0xB5, 0x69 })
                : _colorBrush_AlmostDarkCyan_FF00B569;
        }

        CompositionColorBrush ColorBrush_AlmostMediumTurquoise_FF3DDAB4()
        {
            return (_colorBrush_AlmostMediumTurquoise_FF3DDAB4 == nullptr)
                ? _colorBrush_AlmostMediumTurquoise_FF3DDAB4 = _c.CreateColorBrush({ 0xFF, 0x3D, 0xDA, 0xB4 })
                : _colorBrush_AlmostMediumTurquoise_FF3DDAB4;
        }

        CompositionColorBrush ColorBrush_Black()
        {
            return (_colorBrush_Black == nullptr)
                ? _colorBrush_Black = _c.CreateColorBrush({ 0xFF, 0x00, 0x00, 0x00 })
                : _colorBrush_Black;
        }

        CompositionEffectBrush EffectBrush_0()
        {
            const auto effectFactory = EffectFactory();
            const auto result = effectFactory.CreateBrush();
            result.SetSourceParameter(L"destination", SurfaceBrush_0());
            result.SetSourceParameter(L"source", SurfaceBrush_1());
            return result;
        }

        CompositionEffectBrush EffectBrush_1()
        {
            const auto effectFactory = EffectFactory();
            const auto result = effectFactory.CreateBrush();
            result.SetSourceParameter(L"destination", SurfaceBrush_2());
            result.SetSourceParameter(L"source", SurfaceBrush_3());
            return result;
        }

        CompositionEffectFactory EffectFactory()
        {
            auto compositeEffect = winrt::make_self<CompositeEffect>();
            compositeEffect->Mode(CanvasComposite::DestinationIn);
            compositeEffect->AddSource(CompositionEffectSourceParameter(L"destination"));
            compositeEffect->AddSource(CompositionEffectSourceParameter(L"source"));
            if (_effectFactory != nullptr) { return _effectFactory; }
            const auto result = _effectFactory = _c.CreateEffectFactory(*compositeEffect);
            return result;
        }

        CompositionPath Path_0()
        {
            if (_path_0 != nullptr) { return _path_0; }
            const auto result = _path_0 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_3()));
            return result;
        }

        CompositionPath Path_1()
        {
            if (_path_1 != nullptr) { return _path_1; }
            const auto result = _path_1 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_4()));
            return result;
        }

        CompositionPathGeometry PathGeometry_0()
        {
            return (_pathGeometry_0 == nullptr)
                ? _pathGeometry_0 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_0())))
                : _pathGeometry_0;
        }

        CompositionPathGeometry PathGeometry_1()
        {
            return (_pathGeometry_1 == nullptr)
                ? _pathGeometry_1 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_1())))
                : _pathGeometry_1;
        }

        CompositionPathGeometry PathGeometry_2()
        {
            return (_pathGeometry_2 == nullptr)
                ? _pathGeometry_2 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_2())))
                : _pathGeometry_2;
        }

        // - Shape tree root for layer: Layer 1
        // ShapeGroup: Group 2 Offset:<28.373, 23.309>
        CompositionPathGeometry PathGeometry_3()
        {
            if (_pathGeometry_3 != nullptr) { return _pathGeometry_3; }
            const auto result = _pathGeometry_3 = _c.CreatePathGeometry(Path_0());
            return result;
        }

        // - Shape tree root for layer: Layer 1
        // ShapeGroup: Group 1 Offset:<12.956, 30.547>
        CompositionPathGeometry PathGeometry_4()
        {
            if (_pathGeometry_4 != nullptr) { return _pathGeometry_4; }
            const auto result = _pathGeometry_4 = _c.CreatePathGeometry(Path_1());
            return result;
        }

        // - Shape tree root for layer: Layer 2
        // ShapeGroup: Group 2 Offset:<28.373, 23.309>
        CompositionPathGeometry PathGeometry_5()
        {
            if (_pathGeometry_5 != nullptr) { return _pathGeometry_5; }
            const auto result = _pathGeometry_5 = _c.CreatePathGeometry(Path_0());
            return result;
        }

        // - Shape tree root for layer: Layer 2
        // ShapeGroup: Group 1 Offset:<12.956, 30.547>
        CompositionPathGeometry PathGeometry_6()
        {
            if (_pathGeometry_6 != nullptr) { return _pathGeometry_6; }
            const auto result = _pathGeometry_6 = _c.CreatePathGeometry(Path_1());
            return result;
        }

        // Shape tree root for layer: Check
        // Path 1
        CompositionSpriteShape SpriteShape_0()
        {
            // Offset:<28.341, 23.343>
            const auto geometry = PathGeometry_0();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 28.3409996F, 23.3430004F }, ColorBrush_AlmostMediumTurquoise_FF3DDAB4());;
            return result;
        }

        // Shape tree root for layer: Check
        // Path 1
        CompositionSpriteShape SpriteShape_1()
        {
            // Offset:<12.962, 30.728>
            const auto geometry = PathGeometry_1();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 12.9619999F, 30.7280006F }, ColorBrush_AlmostMediumTurquoise_FF3DDAB4());;
            return result;
        }

        // Shape tree root for layer: Check
        // Path 1
        CompositionSpriteShape SpriteShape_2()
        {
            // Offset:<17.261, 34.847>
            const auto geometry = PathGeometry_2();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 17.2609997F, 34.8470001F }, ColorBrush_AlmostDarkCyan_FF00B569());;
            return result;
        }

        // Shape tree root for layer: Layer 1
        // Path 1
        CompositionSpriteShape SpriteShape_3()
        {
            // Offset:<28.373, 23.309>
            const auto result = CreateSpriteShape(PathGeometry_3(), { 1.0F, 0.0F, 0.0F, 1.0F, 28.3729992F, 23.309F });;
            result.StrokeBrush(ColorBrush_Black());
            result.StrokeMiterLimit(5.0F);
            result.StrokeThickness(7.0F);
            return result;
        }

        // Shape tree root for layer: Layer 1
        // Path 1
        CompositionSpriteShape SpriteShape_4()
        {
            // Offset:<12.956, 30.547>
            const auto result = CreateSpriteShape(PathGeometry_4(), { 1.0F, 0.0F, 0.0F, 1.0F, 12.9560003F, 30.5470009F });;
            result.StrokeBrush(ColorBrush_Black());
            result.StrokeMiterLimit(5.0F);
            result.StrokeThickness(7.0F);
            return result;
        }

        // Shape tree root for layer: Check 2
        // Path 1
        CompositionSpriteShape SpriteShape_5()
        {
            // Offset:<28.341, 23.343>
            const auto geometry = PathGeometry_0();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 28.3409996F, 23.3430004F }, ColorBrush_AlmostMediumTurquoise_FF3DDAB4());;
            return result;
        }

        // Shape tree root for layer: Check 2
        // Path 1
        CompositionSpriteShape SpriteShape_6()
        {
            // Offset:<12.962, 30.728>
            const auto geometry = PathGeometry_1();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 12.9619999F, 30.7280006F }, ColorBrush_AlmostMediumTurquoise_FF3DDAB4());;
            return result;
        }

        // Shape tree root for layer: Check 2
        // Path 1
        CompositionSpriteShape SpriteShape_7()
        {
            // Offset:<17.261, 34.847>
            const auto geometry = PathGeometry_2();
            const auto result = CreateSpriteShape(geometry, { 1.0F, 0.0F, 0.0F, 1.0F, 17.2609997F, 34.8470001F }, ColorBrush_AlmostDarkCyan_FF00B569());;
            return result;
        }

        // Shape tree root for layer: Layer 2
        // Path 1
        CompositionSpriteShape SpriteShape_8()
        {
            // Offset:<28.373, 23.309>
            const auto result = CreateSpriteShape(PathGeometry_5(), { 1.0F, 0.0F, 0.0F, 1.0F, 28.3729992F, 23.309F });;
            result.StrokeBrush(ColorBrush_Black());
            result.StrokeMiterLimit(5.0F);
            result.StrokeThickness(7.0F);
            return result;
        }

        // Shape tree root for layer: Layer 2
        // Path 1
        CompositionSpriteShape SpriteShape_9()
        {
            // Offset:<12.956, 30.547>
            const auto result = CreateSpriteShape(PathGeometry_6(), { 1.0F, 0.0F, 0.0F, 1.0F, 12.9560003F, 30.5470009F });;
            result.StrokeBrush(ColorBrush_Black());
            result.StrokeMiterLimit(5.0F);
            result.StrokeThickness(7.0F);
            return result;
        }

        CompositionSurfaceBrush SurfaceBrush_0()
        {
            return _c.CreateSurfaceBrush(VisualSurface_0());
        }

        CompositionSurfaceBrush SurfaceBrush_1()
        {
            return _c.CreateSurfaceBrush(VisualSurface_1());
        }

        CompositionSurfaceBrush SurfaceBrush_2()
        {
            return _c.CreateSurfaceBrush(VisualSurface_2());
        }

        CompositionSurfaceBrush SurfaceBrush_3()
        {
            return _c.CreateSurfaceBrush(VisualSurface_3());
        }

        CompositionVisualSurface VisualSurface_0()
        {
            const auto result = _c.CreateVisualSurface();
            result.SourceVisual(ContainerVisual_0());
            result.SourceSize({ 48.0F, 48.0F });
            return result;
        }

        CompositionVisualSurface VisualSurface_1()
        {
            const auto result = _c.CreateVisualSurface();
            result.SourceVisual(ContainerVisual_1());
            result.SourceSize({ 48.0F, 48.0F });
            return result;
        }

        CompositionVisualSurface VisualSurface_2()
        {
            const auto result = _c.CreateVisualSurface();
            result.SourceVisual(ContainerVisual_2());
            result.SourceSize({ 48.0F, 48.0F });
            return result;
        }

        CompositionVisualSurface VisualSurface_3()
        {
            const auto result = _c.CreateVisualSurface();
            result.SourceVisual(ContainerVisual_3());
            result.SourceSize({ 48.0F, 48.0F });
            return result;
        }

        ContainerVisual ContainerVisual_0()
        {
            const auto result = _c.CreateContainerVisual();
            result.BorderMode(CompositionBorderMode::Soft);
            // Shape tree root for layer: Check
            result.Children().InsertAtTop(ShapeVisual_0());
            return result;
        }

        ContainerVisual ContainerVisual_1()
        {
            const auto result = _c.CreateContainerVisual();
            result.BorderMode(CompositionBorderMode::Soft);
            // Shape tree root for layer: Layer 1
            result.Children().InsertAtTop(ShapeVisual_1());
            return result;
        }

        ContainerVisual ContainerVisual_2()
        {
            const auto result = _c.CreateContainerVisual();
            result.BorderMode(CompositionBorderMode::Soft);
            // Shape tree root for layer: Check 2
            result.Children().InsertAtTop(ShapeVisual_2());
            return result;
        }

        ContainerVisual ContainerVisual_3()
        {
            const auto result = _c.CreateContainerVisual();
            result.BorderMode(CompositionBorderMode::Soft);
            // Shape tree root for layer: Layer 2
            result.Children().InsertAtTop(ShapeVisual_3());
            return result;
        }

        // The root of the composition.
        ContainerVisual Root()
        {
            if (_root != nullptr) { return _root; }
            const auto result = _root = _c.CreateContainerVisual();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Progress", 0.0F);
            const auto children = result.Children();
            children.InsertAtTop(SpriteVisual_0());
            children.InsertAtTop(SpriteVisual_1());
            return result;
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_0()
        {
            return (_cubicBezierEasingFunction_0 == nullptr)
                ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.666999996F, 1.0F })
                : _cubicBezierEasingFunction_0;
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_1()
        {
            return (_cubicBezierEasingFunction_1 == nullptr)
                ? _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.833000004F, 0.833000004F })
                : _cubicBezierEasingFunction_1;
        }

        // - - Shape tree root for layer: Layer 2
        // - ShapeGroup: Group 2 Offset:<28.373, 23.309>
        // TrimEnd
        ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_1_0()
        {
            // Frame 0.
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, StepThenHoldEasingFunction());
            // Frame 21.
            result.InsertKeyFrame(0.75F, 0.0F, HoldThenStepEasingFunction());
            // Frame 25.
            result.InsertKeyFrame(0.892857134F, 1.0F, CubicBezierEasingFunction_0());
            return result;
        }

        // - - Shape tree root for layer: Layer 2
        // - ShapeGroup: Group 1 Offset:<12.956, 30.547>
        // TrimEnd
        ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_1_1()
        {
            // Frame 0.
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, StepThenHoldEasingFunction());
            // Frame 17.
            result.InsertKeyFrame(0.607142866F, 0.0F, HoldThenStepEasingFunction());
            // Frame 21.
            result.InsertKeyFrame(0.75F, 1.0F, CubicBezierEasingFunction_1());
            return result;
        }

        // - - Shape tree root for layer: Layer 1
        // - ShapeGroup: Group 2 Offset:<28.373, 23.309>
        // TrimStart
        ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_1_0()
        {
            // Frame 0.
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, StepThenHoldEasingFunction());
            // Frame 7.
            result.InsertKeyFrame(0.25F, 0.0F, HoldThenStepEasingFunction());
            // Frame 11.
            result.InsertKeyFrame(0.392857134F, 1.0F, CubicBezierEasingFunction_0());
            return result;
        }

        // - - Shape tree root for layer: Layer 1
        // - ShapeGroup: Group 1 Offset:<12.956, 30.547>
        // TrimStart
        ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_1_1()
        {
            // Frame 0.
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, StepThenHoldEasingFunction());
            // Frame 3.
            result.InsertKeyFrame(0.107142858F, 0.0F, HoldThenStepEasingFunction());
            // Frame 7.
            result.InsertKeyFrame(0.25F, 1.0F, CubicBezierEasingFunction_1());
            return result;
        }

        // Shape tree root for layer: Check
        ShapeVisual ShapeVisual_0()
        {
            if (_shapeVisual_0 != nullptr) { return _shapeVisual_0; }
            const auto result = _shapeVisual_0 = _c.CreateShapeVisual();
            result.Size({ 48.0F, 48.0F });
            const auto shapes = result.Shapes();
            // ShapeGroup: Group 3 Offset:<28.341, 23.343>
            shapes.Append(SpriteShape_0());
            // ShapeGroup: Group 2 Offset:<12.962, 30.728>
            shapes.Append(SpriteShape_1());
            // ShapeGroup: Group 1 Offset:<17.261, 34.847>
            shapes.Append(SpriteShape_2());
            return result;
        }

        // Shape tree root for layer: Layer 1
        ShapeVisual ShapeVisual_1()
        {
            if (_shapeVisual_1 != nullptr) { return _shapeVisual_1; }
            const auto result = _shapeVisual_1 = _c.CreateShapeVisual();
            result.Size({ 48.0F, 48.0F });
            const auto shapes = result.Shapes();
            // ShapeGroup: Group 2 Offset:<28.373, 23.309>
            shapes.Append(SpriteShape_3());
            // ShapeGroup: Group 1 Offset:<12.956, 30.547>
            shapes.Append(SpriteShape_4());
            return result;
        }

        // Shape tree root for layer: Check 2
        ShapeVisual ShapeVisual_2()
        {
            if (_shapeVisual_2 != nullptr) { return _shapeVisual_2; }
            const auto result = _shapeVisual_2 = _c.CreateShapeVisual();
            result.IsVisible(false);
            result.Size({ 48.0F, 48.0F });
            const auto shapes = result.Shapes();
            // ShapeGroup: Group 3 Offset:<28.341, 23.343>
            shapes.Append(SpriteShape_5());
            // ShapeGroup: Group 2 Offset:<12.962, 30.728>
            shapes.Append(SpriteShape_6());
            // ShapeGroup: Group 1 Offset:<17.261, 34.847>
            shapes.Append(SpriteShape_7());
            return result;
        }

        // Shape tree root for layer: Layer 2
        ShapeVisual ShapeVisual_3()
        {
            if (_shapeVisual_3 != nullptr) { return _shapeVisual_3; }
            const auto result = _shapeVisual_3 = _c.CreateShapeVisual();
            result.IsVisible(false);
            result.Size({ 48.0F, 48.0F });
            const auto shapes = result.Shapes();
            // ShapeGroup: Group 2 Offset:<28.373, 23.309>
            shapes.Append(SpriteShape_8());
            // ShapeGroup: Group 1 Offset:<12.956, 30.547>
            shapes.Append(SpriteShape_9());
            return result;
        }

        SpriteVisual SpriteVisual_0()
        {
            const auto result = _c.CreateSpriteVisual();
            result.Size({ 48.0F, 48.0F });
            result.Brush(EffectBrush_0());
            return result;
        }

        SpriteVisual SpriteVisual_1()
        {
            const auto result = _c.CreateSpriteVisual();
            result.Size({ 48.0F, 48.0F });
            result.Brush(EffectBrush_1());
            return result;
        }

        StepEasingFunction HoldThenStepEasingFunction()
        {
            if (_holdThenStepEasingFunction != nullptr) { return _holdThenStepEasingFunction; }
            const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
            result.IsFinalStepSingleFrame(true);
            return result;
        }

        StepEasingFunction StepThenHoldEasingFunction()
        {
            if (_stepThenHoldEasingFunction != nullptr) { return _stepThenHoldEasingFunction; }
            const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
            result.IsInitialStepSingleFrame(true);
            return result;
        }

        static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
        {
            return geo.as<IGeometrySource2D>();
        }

    public:
        CheckmarkAnim_AnimatedVisual(Compositor compositor)
            : _c{compositor}
            , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
        {
            winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
            const auto _ = Root();
        }

        void Close()
        {
            if (_root)
            {
                _root.Close();
            }
        }

        TimeSpan Duration() const
        {
            return TimeSpan{ c_durationTicks };
        }

        Visual RootVisual() const
        {
            return _root;
        }

        float2 Size() const
        {
            return { 48.0F, 48.0F };
        }

        void CreateAnimations()
        {
            _pathGeometry_3.StartAnimation(L"TrimStart", TrimStartScalarAnimation_0_to_1_0(), AnimationController_0());
            _pathGeometry_4.StartAnimation(L"TrimStart", TrimStartScalarAnimation_0_to_1_1(), AnimationController_0());
            _pathGeometry_5.StartAnimation(L"TrimEnd", TrimEndScalarAnimation_0_to_1_0(), AnimationController_0());
            _pathGeometry_6.StartAnimation(L"TrimEnd", TrimEndScalarAnimation_0_to_1_1(), AnimationController_0());
            _shapeVisual_0.StartAnimation(L"IsVisible", IsVisibleBooleanAnimation_0(), AnimationController_0());
            _shapeVisual_1.StartAnimation(L"IsVisible", IsVisibleBooleanAnimation_0(), AnimationController_0());
            _shapeVisual_2.StartAnimation(L"IsVisible", IsVisibleBooleanAnimation_1(), AnimationController_0());
            _shapeVisual_3.StartAnimation(L"IsVisible", IsVisibleBooleanAnimation_1(), AnimationController_0());
        }

        void DestroyAnimations()
        {
            _pathGeometry_3.StopAnimation(L"TrimStart");
            _pathGeometry_4.StopAnimation(L"TrimStart");
            _pathGeometry_5.StopAnimation(L"TrimEnd");
            _pathGeometry_6.StopAnimation(L"TrimEnd");
            _shapeVisual_0.StopAnimation(L"IsVisible");
            _shapeVisual_1.StopAnimation(L"IsVisible");
            _shapeVisual_2.StopAnimation(L"IsVisible");
            _shapeVisual_3.StopAnimation(L"IsVisible");
        }

    };

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual CheckmarkAnim::TryCreateAnimatedVisual(
        Compositor const& compositor)
    {
        IInspectable diagnostics = nullptr;
        return TryCreateAnimatedVisual(compositor, diagnostics);
    }

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual CheckmarkAnim::TryCreateAnimatedVisual(
        Compositor const& compositor,
        IInspectable& diagnostics)
    {
        diagnostics = nullptr;
        auto result = winrt::make<CheckmarkAnim_AnimatedVisual>(compositor);
        result.CreateAnimations();
        return result;
    }

    double CheckmarkAnim::FrameCount()
    {
        return 28.0;
    }

    double CheckmarkAnim::Framerate()
    {
        return 24.0;
    }

    TimeSpan CheckmarkAnim::Duration()
    {
        return TimeSpan{ 11666666L };
    }

    double CheckmarkAnim::FrameToProgress(double frameNumber)
    {
        return frameNumber / 28.0;
    }

    winrt::Windows::Foundation::Collections::IMapView<hstring, double> CheckmarkAnim::Markers()
    {
        return winrt::single_threaded_map<winrt::hstring, double>(
            std::map<winrt::hstring, double>
            {
            }
        ).GetView();
    }

    void CheckmarkAnim::SetColorProperty(hstring const&, Color)
    {
    }

    void CheckmarkAnim::SetScalarProperty(hstring const&, double)
    {
    }
} // end namespace
